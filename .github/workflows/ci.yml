name: Test

on:
  pull_request:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - '**/README.md'
      - 'LICENSE*'

jobs:
  linux:
    runs-on: ubuntu-20.04
    env:
      MIX_ENV: test
    strategy:
      matrix:
        otp_version: [25, 26]
    
    name: Linux x86_64 - OTP ${{ matrix.otp_version }}

    steps:
      - uses: actions/checkout@v3
      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp_version }}
          elixir-version: 1.15

      - name: Compile and Test
        run: |
          mix deps.get
          mix elixir_make.precompile
          mix test

  windows:
    runs-on: windows-latest
    env:
      MIX_ENV: test
    strategy:
      matrix:
        otp_version: [25, 26]

    name: Windows x86_64 - OTP ${{ matrix.otp_version }}

    steps:
      - uses: actions/checkout@v3

      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp_version }}
          elixir-version: 1.15

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Compile and Test
        shell: bash
        run: |
          mix deps.get
          mix elixir_make.precompile
          mix test

  macos:
    runs-on: macos-11
    env:
      MIX_ENV: test
      ELIXIR_VERSION: "1.16.0"
    strategy:
      matrix:
        otp_version: ["25.3.2.8", "26.2.2"]

    name: macOS x86_64 - OTP ${{ matrix.otp_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Cache OTP
        uses: actions/cache@v3
        id: cache-otp
        with:
          path: ./cache/otp
          key: ${{ runner.os }}-otp-${{ matrix.otp_version }}

      - name: Download OTP
        if: steps.cache-otp.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./cache/otp
          curl -fSL https://github.com/cocoa-xu/otp-build/releases/download/v${{ matrix.otp_version }}/otp-x86_64-apple-darwin.tar.gz -o ./cache/otp/otp-v${{ matrix.otp_version }}-x86_64-apple-darwin.tar.gz
          cd ./cache/otp
          tar -xzf otp-v${{ matrix.otp_version }}-x86_64-apple-darwin.tar.gz

      - name: Cache Elixir
        id: cache-elixir
        uses: actions/cache@v3
        with:
          path: ./cache/elixir
          key: ${{ runner.os }}-elixir-${{ env.ELIXIR_VERSION }}

      - name: Download and Compile Elixir
        if: steps.cache-elixir.outputs.cache-hit != 'true'
        run: |
          export PATH=$(pwd)/./cache/otp/usr/local/bin:$(pwd)/./cache/elixir/elixir-${{ env.ELIXIR_VERSION }}/bin:${PATH}
          export ERL_ROOTDIR=$(pwd)/./cache/otp/usr/local/lib/erlang
          mkdir -p ./cache/elixir
          curl -fSL https://github.com/elixir-lang/elixir/archive/refs/tags/v${{ env.ELIXIR_VERSION }}.tar.gz -o ./cache/elixir/elixir-${{ env.ELIXIR_VERSION }}.tar.gz
          cd ./cache/elixir
          tar -xzf elixir-${{ env.ELIXIR_VERSION }}.tar.gz
          cd elixir-${{ env.ELIXIR_VERSION }}
          make -j$(sysctl -n hw.ncpu) install

      - name: Install Mix and Rebar
        run: |
          export PATH=$(pwd)/./cache/otp/usr/local/bin:$(pwd)/./cache/elixir/elixir-${{ env.ELIXIR_VERSION }}/bin:${PATH}
          export ERL_ROOTDIR=$(pwd)/./cache/otp/usr/local/lib/erlang
          mix local.hex --force
          mix local.rebar --force

      - name: Compile and Test
        run: |
          export PATH=$(pwd)/./cache/otp/usr/local/bin:$(pwd)/./cache/elixir/elixir-${{ env.ELIXIR_VERSION }}/bin:${PATH}
          export ERL_ROOTDIR=$(pwd)/./cache/otp/usr/local/lib/erlang
        
          mix deps.get
          mix elixir_make.precompile
          mix test
